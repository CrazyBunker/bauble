package main

import (
	"flag"
	"fmt"
	"os"
	"os/exec"
	"strconv"
	"strings"
)

// BatteryInfo —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞—Ç–∞—Ä–µ–µ
type BatteryInfo struct {
	Level      int    // —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
	Status     string // —Å—Ç–∞—Ç—É—Å –∑–∞—Ä—è–¥–∫–∏
	ACPowered  bool   // –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∫–∞–±–µ–ª—å –ø–∏—Ç–∞–Ω–∏—è
	USBPowered bool   // –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ USB
}

// –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã ANSI –¥–ª—è bash
const (
	ColorDarkGreen  = "\033[32m" // —Ç–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π
	ColorLightGreen = "\033[92m" // —Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
	ColorYellow     = "\033[33m" // –∂–µ–ª—Ç—ã–π
	ColorRed        = "\033[31m" // –∫—Ä–∞—Å–Ω—ã–π
	ColorReset      = "\033[0m"  // —Å–±—Ä–æ—Å —Ü–≤–µ—Ç–∞
)

// –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX –¥–ª—è genmon
const (
	ColorGenmonDarkGreen  = "#006400" // —Ç–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π
	ColorGenmonLightGreen = "#32CD32" // —Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
	ColorGenmonYellow     = "#FFD700" // –∂–µ–ª—Ç—ã–π
	ColorGenmonRed        = "#FF0000" // –∫—Ä–∞—Å–Ω—ã–π
)

// parseBatteryData –ø–∞—Ä—Å–∏—Ç –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã dumpsys battery
func parseBatteryData(output string) (*BatteryInfo, error) {
	info := &BatteryInfo{}
	lines := strings.Split(output, "\n")

	for _, line := range lines {
		line = strings.TrimSpace(line)

		switch {
		case strings.Contains(line, "level:"):
			parts := strings.Fields(line)
			if len(parts) >= 2 {
				level, err := strconv.Atoi(parts[1])
				if err != nil {
					return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —É—Ä–æ–≤–Ω—è –∑–∞—Ä—è–¥–∞: %v", err)
				}
				info.Level = level
			}

		case strings.Contains(line, "AC powered:"):
			parts := strings.Fields(line)
			if len(parts) >= 2 {
				info.ACPowered = parts[1] == "true"
			}

		case strings.Contains(line, "USB powered:"):
			parts := strings.Fields(line)
			if len(parts) >= 2 {
				info.USBPowered = parts[1] == "true"
			}

		case strings.Contains(line, "status:"):
			parts := strings.Fields(line)
			if len(parts) >= 2 {
				statusCode, err := strconv.Atoi(parts[1])
				if err == nil {
					switch statusCode {
					case 2:
						info.Status = "Charging"
					case 3:
						info.Status = "Discharging"
					case 4:
						info.Status = "Not charging"
					case 5:
						info.Status = "Full"
					default:
						info.Status = "Unknown"
					}
				}
			}
		}
	}

	return info, nil
}

// getBatteryColor –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç–æ–≤–æ–π –∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –∑–∞—Ä—è–¥–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞
func getBatteryColor(info *BatteryInfo, outputMode string) string {
	// –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞—Ä—è–∂–∞–µ—Ç—Å—è - —Ç–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π
	if info.Status == "Charging" || info.ACPowered || info.USBPowered {
		if outputMode == "genmon" {
			return ColorGenmonDarkGreen
		}
		return ColorDarkGreen
	}

	// –ï—Å–ª–∏ —Ä–∞–∑—Ä—è–∂–∞–µ—Ç—Å—è - —Ü–≤–µ—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è –∑–∞—Ä—è–¥–∞
	switch {
	case info.Level >= 80:
		if outputMode == "genmon" {
			return ColorGenmonLightGreen
		}
		return ColorLightGreen
	case info.Level >= 20:
		if outputMode == "genmon" {
			return ColorGenmonYellow
		}
		return ColorYellow
	default:
		if outputMode == "genmon" {
			return ColorGenmonRed
		}
		return ColorRed
	}
}

// getBatteryData –≤—ã–ø–æ–ª–Ω—è–µ—Ç ADB-–∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –¥–∞–Ω–Ω—ã–º–∏
func getBatteryData() (*BatteryInfo, error) {
	cmd := exec.Command("adb", "shell", "dumpsys", "battery")
	output, err := cmd.Output()
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ADB-–∫–æ–º–∞–Ω–¥—ã: %v", err)
	}

	return parseBatteryData(string(output))
}

// outputBash –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è bash —Å ANSI —Ü–≤–µ—Ç–∞–º–∏
func outputBash(info *BatteryInfo) {
	color := getBatteryColor(info, "bash")

	chargingIndicator := ""
	if info.Status == "Charging" || info.ACPowered || info.USBPowered {
		chargingIndicator = "‚ö°"
	}

	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ü–≤–µ—Ç–æ–º
	fmt.Printf("%s–£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞: %d%% %s(%s)%s\n",
		color,
		info.Level,
		chargingIndicator,
		info.Status,
		ColorReset)

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	fmt.Printf("AC powered: %v\n", info.ACPowered)
	fmt.Printf("USB powered: %v\n", info.USBPowered)
}

// outputGenmon –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Xfce genmon –ø–ª–∞–≥–∏–Ω–∞
func outputGenmon(info *BatteryInfo) {
	color := getBatteryColor(info, "genmon")

	// –ò–∫–æ–Ω–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
	icon := "üîã" // –±–∞—Ç–∞—Ä–µ—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	if info.Status == "Charging" || info.ACPowered || info.USBPowered {
		icon = "‚ö°" // –º–æ–ª–Ω–∏—è –ø—Ä–∏ –∑–∞—Ä—è–¥–∫–µ
	} else if info.Level < 20 {
		icon = "ü™´" // —Ä–∞–∑—Ä—è–∂–µ–Ω–Ω–∞—è –±–∞—Ç–∞—Ä–µ—è
	}

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–∞–Ω–µ–ª–∏ (–∫—Ä–∞—Ç–∫–∏–π)
	fmt.Printf("<txt><span foreground='%s'>%s %d%%</span></txt>\n",
		color, icon, info.Level)

	// –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ (–ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
	fmt.Printf("<tool><b>–°—Ç–∞—Ç—É—Å –±–∞—Ç–∞—Ä–µ–∏ Android</b>\n")
	fmt.Printf("–£—Ä–æ–≤–µ–Ω—å: %d%%\n", info.Level)
	fmt.Printf("–°—Ç–∞—Ç—É—Å: %s\n", info.Status)
	fmt.Printf("AC –ø–∏—Ç–∞–Ω–∏–µ: %v\n", info.ACPowered)
	fmt.Printf("USB –ø–∏—Ç–∞–Ω–∏–µ: %v</tool>\n", info.USBPowered)
}

func main() {
	// –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	outputFlag := flag.String("o", "genmon", "–†–µ–∂–∏–º –≤—ã–≤–æ–¥–∞: genmon –∏–ª–∏ bash")
	helpFlag := flag.Bool("h", false, "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")

	flag.Parse()

	if *helpFlag {
		fmt.Println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: adb-battery [-o genmon|bash] [-h]")
		fmt.Println("  -o genmon   –í—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Xfce genmon (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
		fmt.Println("  -o bash     –í—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ —Å —Ü–≤–µ—Ç–∞–º–∏")
		fmt.Println("  -h          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
		os.Exit(0)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è -o
	if *outputFlag != "genmon" && *outputFlag != "bash" {
		fmt.Printf("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è -o: %s\n", *outputFlag)
		fmt.Println("–î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: genmon, bash")
		os.Exit(1)
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–∞—Ç–∞—Ä–µ–µ
	info, err := getBatteryData()
	if err != nil {
		if *outputFlag == "genmon" {
			fmt.Printf("<txt><span foreground='%s'>üî¥ –û—à–∏–±–∫–∞</span></txt>\n", ColorGenmonRed)
			fmt.Printf("<tool>%s</tool>\n", err.Error())
		} else {
			fmt.Printf("–û—à–∏–±–∫–∞: %v\n", err)
		}
		os.Exit(1)
	}

	// –í—ã–≤–æ–¥–∏–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
	if *outputFlag == "genmon" {
		outputGenmon(info)
	} else {
		outputBash(info)
	}
}
